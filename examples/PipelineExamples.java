package examples;\n\nimport com.bloxbean.cardano.yaci.core.protocol.chainsync.n2n.ChainsyncAgent;\nimport com.bloxbean.cardano.yaci.core.protocol.chainsync.messages.Point;\nimport com.bloxbean.cardano.yaci.core.protocol.chainsync.pipeline.*;\nimport com.bloxbean.cardano.yaci.core.protocol.chainsync.pipeline.strategies.*;\n\n/**\n * Comprehensive examples showing how to use the enhanced ChainSync pipeline system.\n * \n * This class demonstrates various pipeline configurations and use cases,\n * from simple sequential processing to advanced adaptive strategies.\n */\npublic class PipelineExamples {\n    \n    // Example points for demo purposes\n    private static final Point[] KNOWN_POINTS = new Point[]{\n        new Point(0, \"genesis-hash\")\n    };\n    \n    /**\n     * Example 1: Simple Sequential Processing\n     * \n     * Best for: Development, debugging, memory-constrained environments\n     */\n    public static void sequentialPipelineExample() {\n        System.out.println(\"=== Sequential Pipeline Example ===\");\n        \n        // Create agent with sequential strategy - no pipelining\n        ChainsyncAgent agent = PipelineFactory.createForDevelopment(KNOWN_POINTS);\n        \n        System.out.println(\"Strategy: \" + agent.getPipelineStrategyName());\n        System.out.println(\"Enhanced: \" + agent.isEnhancedPipeliningEnabled());\n        \n        // Log pipeline statistics periodically\n        agent.logPipelineStatistics();\n        \n        // Agent will process blocks one at a time with detailed logging\n        // Perfect for understanding the sync process step by step\n    }\n    \n    /**\n     * Example 2: High-Performance Sync from Genesis\n     * \n     * Best for: Initial blockchain sync, batch processing\n     */\n    public static void syncFromGenesisExample() {\n        System.out.println(\"=== Sync from Genesis Example ===\");\n        \n        // Create agent optimized for high-throughput sync\n        ChainsyncAgent agent = PipelineFactory.createForSyncFromGenesis(KNOWN_POINTS);\n        \n        System.out.println(\"Strategy: \" + agent.getPipelineStrategyName());\n        System.out.println(\"Max Pipeline Depth: \" + agent.getPipelineMetrics());\n        \n        // This configuration uses aggressive pipelining (depth=100)\n        // with optimized error recovery for maximum sync speed\n        \n        // Monitor performance\n        PipelineFactory.PipelineStatus status = PipelineFactory.getStatus(agent);\n        System.out.println(\"Status: \" + status.getSummary());\n    }\n    \n    /**\n     * Example 3: Production Tip Following\n     * \n     * Best for: Production applications following the chain tip\n     */\n    public static void tipFollowingExample() {\n        System.out.println(\"=== Tip Following Example ===\");\n        \n        // Create agent optimized for low-latency tip following\n        ChainsyncAgent agent = PipelineFactory.createForTipFollowing(KNOWN_POINTS);\n        \n        System.out.println(\"Strategy: \" + agent.getPipelineStrategyName());\n        \n        // This uses conservative pipelining (depth=5) for quick response\n        // Monitor health\n        PipelineFactory.PipelineStatus status = PipelineFactory.getStatus(agent);\n        if (status.isHealthy()) {\n            System.out.println(\"✅ Pipeline is healthy\");\n        }\n        \n        // Log stats every 10 minutes in production\n        System.out.println(\"Blocks/sec: \" + status.getBlocksPerSecond());\n    }\n    \n    /**\n     * Example 4: Custom Strategy Configuration\n     * \n     * Best for: Specific requirements, fine-tuned performance\n     */\n    public static void customStrategyExample() {\n        System.out.println(\"=== Custom Strategy Example ===\");\n        \n        // Create custom watermark strategy\n        PipelineDecisionStrategy customStrategy = new WatermarkPipelineStrategy(20, 80);\n        \n        // Build custom configuration\n        PipelineConfiguration customConfig = PipelineConfiguration.builder()\n            .strategy(customStrategy)\n            .enhancedPipeliningEnabled(true)\n            .metricsEnabled(true)\n            .statsLoggingInterval(120) // Every 2 minutes\n            .maxMemoryPressure(85)\n            .networkTimeoutMs(45000)\n            .adaptiveStrategyEnabled(true)\n            .minEfficiencyThreshold(0.75)\n            .build();\n        \n        // Create agent with custom configuration\n        ChainsyncAgent agent = PipelineFactory.create(KNOWN_POINTS, customConfig);\n        \n        System.out.println(\"Custom strategy: \" + agent.getPipelineStrategyName());\n    }\n    \n    /**\n     * Example 5: Dynamic Strategy Switching\n     * \n     * Best for: Adaptive applications that adjust to network conditions\n     */\n    public static void dynamicStrategyExample() {\n        System.out.println(\"=== Dynamic Strategy Example ===\");\n        \n        ChainsyncAgent agent = PipelineFactory.createDefault(KNOWN_POINTS);\n        \n        // Start with conservative strategy\n        PipelineFactory.updateStrategy(agent, PipelineStrategies.conservative());\n        System.out.println(\"Initial: \" + agent.getPipelineStrategyName());\n        \n        // Monitor performance and adapt\n        PipelineFactory.PipelineStatus status = PipelineFactory.getStatus(agent);\n        \n        if (status.isHighThroughput() && status.isHealthy()) {\n            // Network is performing well, switch to aggressive\n            PipelineFactory.updateStrategy(agent, PipelineStrategies.aggressive());\n            System.out.println(\"Switched to: \" + agent.getPipelineStrategyName());\n        } else if (!status.isHealthy()) {\n            // Network issues, fall back to sequential\n            PipelineFactory.updateStrategy(agent, PipelineStrategies.sequential());\n            System.out.println(\"Fallback to: \" + agent.getPipelineStrategyName());\n        }\n    }\n    \n    /**\n     * Example 6: Error Recovery and Circuit Breaker\n     * \n     * Best for: Robust applications with comprehensive error handling\n     */\n    public static void errorRecoveryExample() {\n        System.out.println(\"=== Error Recovery Example ===\");\n        \n        // Create configuration with conservative error recovery\n        PipelineErrorRecovery.ErrorRecoveryConfig errorConfig = \n            PipelineErrorRecovery.ErrorRecoveryConfig.conservativeConfig();\n        \n        PipelineConfiguration config = PipelineConfiguration.production()\n            .toBuilder()\n            .errorRecoveryConfig(errorConfig)\n            .build();\n        \n        ChainsyncAgent agent = PipelineFactory.create(KNOWN_POINTS, config);\n        \n        System.out.println(\"Error recovery enabled with circuit breaker\");\n        System.out.println(\"Max consecutive failures: \" + errorConfig.getMaxConsecutiveFailures());\n        System.out.println(\"Initial backoff: \" + errorConfig.getInitialBackoffDelay());\n        \n        // In real usage, errors would be automatically handled by the pipeline\n        // The circuit breaker will open after max failures and close after timeout\n    }\n    \n    /**\n     * Example 7: Resource-Constrained Environment\n     * \n     * Best for: IoT devices, mobile apps, memory-limited systems\n     */\n    public static void resourceConstrainedExample() {\n        System.out.println(\"=== Resource Constrained Example ===\");\n        \n        ChainsyncAgent agent = PipelineFactory.createResourceConstrained(KNOWN_POINTS);\n        \n        System.out.println(\"Strategy: \" + agent.getPipelineStrategyName());\n        System.out.println(\"Metrics enabled: \" + (agent.getPipelineMetrics() != null));\n        \n        // This configuration:\n        // - Uses low pipeline depth (10)\n        // - Disables metrics collection to save memory\n        // - Uses conservative error recovery\n        // - Minimizes CPU overhead\n    }\n    \n    /**\n     * Example 8: Monitoring and Metrics\n     * \n     * Best for: Production monitoring, performance analysis\n     */\n    public static void monitoringExample() {\n        System.out.println(\"=== Monitoring Example ===\");\n        \n        ChainsyncAgent agent = PipelineFactory.createDefault(KNOWN_POINTS);\n        \n        // Get comprehensive status\n        PipelineFactory.PipelineStatus status = PipelineFactory.getStatus(agent);\n        \n        System.out.println(\"=== Pipeline Status ===\");\n        System.out.println(status.getSummary());\n        \n        // Get detailed metrics\n        PipelineMetrics metrics = agent.getPipelineMetrics();\n        if (metrics != null) {\n            System.out.println(\"\\n=== Detailed Metrics ===\");\n            System.out.println(metrics.getStatsSummary());\n            \n            // Check specific thresholds\n            if (metrics.getPipelineEfficiency() < 0.8) {\n                System.out.println(\"⚠️ Pipeline efficiency below 80%\");\n            }\n            \n            if (metrics.getAverageResponseTime() > 5000) {\n                System.out.println(\"⚠️ High response times detected\");\n            }\n        }\n        \n        // Log statistics (would be called periodically in production)\n        agent.logPipelineStatistics();\n    }\n    \n    /**\n     * Example 9: Strategy Comparison\n     * \n     * Best for: Performance testing, strategy evaluation\n     */\n    public static void strategyComparisonExample() {\n        System.out.println(\"=== Strategy Comparison Example ===\");\n        \n        String[] strategyNames = {\"sequential\", \"conservative\", \"aggressive\", \"adaptive\"};\n        \n        for (String strategyName : strategyNames) {\n            PipelineDecisionStrategy strategy = PipelineStrategies.fromName(strategyName, 50);\n            ChainsyncAgent agent = PipelineFactory.create(KNOWN_POINTS, \n                PipelineConfiguration.production().withStrategy(strategy));\n            \n            System.out.printf(\"%-12s: %s (depth=%d)%n\", \n                strategyName.toUpperCase(),\n                strategy.getStrategyName(), \n                strategy.getMaxPipelineDepth());\n        }\n        \n        System.out.println(\"\\nChoose strategy based on:\");\n        System.out.println(\"- Sequential: Debugging, compatibility\");\n        System.out.println(\"- Conservative: Stable networks, low latency\");\n        System.out.println(\"- Aggressive: High-bandwidth, initial sync\");\n        System.out.println(\"- Adaptive: General purpose, auto-tuning\");\n    }\n    \n    /**\n     * Example 10: Complete Lifecycle Management\n     * \n     * Best for: Understanding full pipeline lifecycle\n     */\n    public static void lifecycleManagementExample() {\n        System.out.println(\"=== Lifecycle Management Example ===\");\n        \n        // 1. Create and configure agent\n        ChainsyncAgent agent = PipelineFactory.createDefault(KNOWN_POINTS);\n        System.out.println(\"✅ Agent created: \" + agent.getPipelineStrategyName());\n        \n        // 2. Monitor initial state\n        PipelineFactory.PipelineStatus initialStatus = PipelineFactory.getStatus(agent);\n        System.out.println(\"📊 Initial status: \" + initialStatus.getSummary());\n        \n        // 3. Simulate some activity (in real usage, this happens automatically)\n        PipelineMetrics metrics = agent.getPipelineMetrics();\n        for (int i = 0; i < 10; i++) {\n            metrics.recordRequestSent(true);\n            metrics.recordResponseReceived(true, 1024);\n        }\n        \n        // 4. Check updated status\n        PipelineFactory.PipelineStatus updatedStatus = PipelineFactory.getStatus(agent);\n        System.out.println(\"📈 Updated status: \" + updatedStatus.getSummary());\n        \n        // 5. Adapt strategy if needed\n        if (updatedStatus.isHighThroughput()) {\n            PipelineFactory.updateStrategy(agent, PipelineStrategies.aggressive());\n            System.out.println(\"🚀 Switched to aggressive strategy\");\n        }\n        \n        // 6. Reset if needed\n        agent.reset();\n        System.out.println(\"🔄 Pipeline reset\");\n        \n        // 7. Final cleanup\n        PipelineFactory.shutdown();\n        System.out.println(\"🏁 Pipeline factory shutdown\");\n    }\n    \n    /**\n     * Main method to run all examples\n     */\n    public static void main(String[] args) {\n        System.out.println(\"ChainSync Enhanced Pipeline Examples\");\n        System.out.println(\"====================================\\n\");\n        \n        try {\n            sequentialPipelineExample();\n            System.out.println();\n            \n            syncFromGenesisExample();\n            System.out.println();\n            \n            tipFollowingExample();\n            System.out.println();\n            \n            customStrategyExample();\n            System.out.println();\n            \n            dynamicStrategyExample();\n            System.out.println();\n            \n            errorRecoveryExample();\n            System.out.println();\n            \n            resourceConstrainedExample();\n            System.out.println();\n            \n            monitoringExample();\n            System.out.println();\n            \n            strategyComparisonExample();\n            System.out.println();\n            \n            lifecycleManagementExample();\n            \n        } catch (Exception e) {\n            System.err.println(\"Example error: \" + e.getMessage());\n            e.printStackTrace();\n        }\n        \n        System.out.println(\"\\n✅ All examples completed!\");\n    }\n}