plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.unbroken-dome.test-sets' version("4.0.0")
    id 'org.ajoberstar.grgit' version '5.2.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'

    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}


artifacts {
    archives jar
}

dependencies {
    api project(':core')
    api project(':helper')
}

test {
    useJUnitPlatform()
}

// Make all tests use JUnit 5
tasks.withType(Test) {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'yaci'
                description = 'Yaci - A Cardano mini-protocol implementation in Java'
                url = 'https://github.com/bloxbean/yaci'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'satran004'
                        name = 'Satya'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/bloxbean/yaci.git'
                    developerConnection = 'scm:git:ssh://git@github.com/bloxbean/yaci.git'
                    url = 'https://github.com/bloxbean/yaci'
                }
            }
        }
    }

    repositories {
        String ossrhUsername = System.getenv('MAVEN_USERNAME')
        String ossrhPassword = System.getenv('MAVEN_PASSWORD')

        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (isReleaseVersion && !project.hasProperty("skipSigning")) {
    signing {
//        sign configurations.archives
        sign publishing.publications
    }
}

def commit_id=getCheckedOutGitCommitHash()
if (project.version.endsWith("-SNAPSHOT")) {
    version = "${project.version}".replace("-SNAPSHOT", "-${commit_id}-SNAPSHOT")
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.unbroken-dome.test-sets'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    //Jars are with yaci prefix
    archivesBaseName = 'yaci-' + project.name

   // def commit_id=getCheckedOutGitCommitHash()
    if (project.version.endsWith("-SNAPSHOT")) {
        version = "${project.version}".replace("-SNAPSHOT", "-${commit_id}-SNAPSHOT")
    }

    dependencies {
        api libs.slf4j.api

        compileOnly libs.lombok
        annotationProcessor libs.lombok

        testImplementation libs.junit.jupiter.api
        testRuntimeOnly libs.junit.jupiter.engine
        testImplementation libs.harmcrest.library
        testImplementation libs.mockito.inline
        testImplementation libs.mockito.junit.jupiter
        testImplementation libs.assertj.core
        testRuntimeOnly libs.slf4j.reload4j

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
    }

    compileJava {
        sourceCompatibility = '11'
        targetCompatibility = '11'

        options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    testSets {
        integrationTest
    }

    // Make all tests use JUnit 5
    tasks.withType(Test) {
        useJUnitPlatform()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                artifactId 'yaci-' + project.name
                pom {
                    url = 'https://github.com/bloxbean/yaci'
                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'satran004'
                            name = 'Satya'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/bloxbean/yaci.git'
                        developerConnection = 'scm:git:ssh://git@github.com/bloxbean/yaci.git'
                        url = 'https://github.com/bloxbean/yaci'
                    }
                }
            }
        }

        repositories {
            String ossrhUsername = System.getenv('MAVEN_USERNAME')
            String ossrhPassword = System.getenv('MAVEN_PASSWORD')

            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (isReleaseVersion && !project.hasProperty("skipSigning")) {
        signing {
            sign publishing.publications
        }
    }
}

def getCheckedOutGitCommitHash() {
    grgit.head().abbreviatedId
}
